// Generated by view binder compiler. Do not edit!
package com.auvo.painel.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.auvo.painel.R;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final BottomNavigationView bottomNavigation;

  @NonNull
  public final MaterialButton btnRefresh;

  @NonNull
  public final MaterialButton btnRetry;

  @NonNull
  public final FloatingActionButton fabSettings;

  @NonNull
  public final GridLayout gridKpis;

  @NonNull
  public final LinearLayout layoutError;

  @NonNull
  public final LinearLayout layoutLoading;

  @NonNull
  public final LinearLayout layoutProgress;

  @NonNull
  public final RecyclerView recyclerTasks;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView tvError;

  @NonNull
  public final TextView tvLastUpdate;

  @NonNull
  public final TextView tvWelcome;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView,
      @NonNull BottomNavigationView bottomNavigation, @NonNull MaterialButton btnRefresh,
      @NonNull MaterialButton btnRetry, @NonNull FloatingActionButton fabSettings,
      @NonNull GridLayout gridKpis, @NonNull LinearLayout layoutError,
      @NonNull LinearLayout layoutLoading, @NonNull LinearLayout layoutProgress,
      @NonNull RecyclerView recyclerTasks, @NonNull Toolbar toolbar, @NonNull TextView tvError,
      @NonNull TextView tvLastUpdate, @NonNull TextView tvWelcome) {
    this.rootView = rootView;
    this.bottomNavigation = bottomNavigation;
    this.btnRefresh = btnRefresh;
    this.btnRetry = btnRetry;
    this.fabSettings = fabSettings;
    this.gridKpis = gridKpis;
    this.layoutError = layoutError;
    this.layoutLoading = layoutLoading;
    this.layoutProgress = layoutProgress;
    this.recyclerTasks = recyclerTasks;
    this.toolbar = toolbar;
    this.tvError = tvError;
    this.tvLastUpdate = tvLastUpdate;
    this.tvWelcome = tvWelcome;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomNavigation;
      BottomNavigationView bottomNavigation = ViewBindings.findChildViewById(rootView, id);
      if (bottomNavigation == null) {
        break missingId;
      }

      id = R.id.btnRefresh;
      MaterialButton btnRefresh = ViewBindings.findChildViewById(rootView, id);
      if (btnRefresh == null) {
        break missingId;
      }

      id = R.id.btnRetry;
      MaterialButton btnRetry = ViewBindings.findChildViewById(rootView, id);
      if (btnRetry == null) {
        break missingId;
      }

      id = R.id.fabSettings;
      FloatingActionButton fabSettings = ViewBindings.findChildViewById(rootView, id);
      if (fabSettings == null) {
        break missingId;
      }

      id = R.id.gridKpis;
      GridLayout gridKpis = ViewBindings.findChildViewById(rootView, id);
      if (gridKpis == null) {
        break missingId;
      }

      id = R.id.layoutError;
      LinearLayout layoutError = ViewBindings.findChildViewById(rootView, id);
      if (layoutError == null) {
        break missingId;
      }

      id = R.id.layoutLoading;
      LinearLayout layoutLoading = ViewBindings.findChildViewById(rootView, id);
      if (layoutLoading == null) {
        break missingId;
      }

      id = R.id.layoutProgress;
      LinearLayout layoutProgress = ViewBindings.findChildViewById(rootView, id);
      if (layoutProgress == null) {
        break missingId;
      }

      id = R.id.recyclerTasks;
      RecyclerView recyclerTasks = ViewBindings.findChildViewById(rootView, id);
      if (recyclerTasks == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tvError;
      TextView tvError = ViewBindings.findChildViewById(rootView, id);
      if (tvError == null) {
        break missingId;
      }

      id = R.id.tvLastUpdate;
      TextView tvLastUpdate = ViewBindings.findChildViewById(rootView, id);
      if (tvLastUpdate == null) {
        break missingId;
      }

      id = R.id.tvWelcome;
      TextView tvWelcome = ViewBindings.findChildViewById(rootView, id);
      if (tvWelcome == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, bottomNavigation, btnRefresh,
          btnRetry, fabSettings, gridKpis, layoutError, layoutLoading, layoutProgress,
          recyclerTasks, toolbar, tvError, tvLastUpdate, tvWelcome);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
