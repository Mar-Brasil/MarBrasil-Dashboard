# Plano de Desenvolvimento - App Android v2.0

## Visão Geral

Evoluir o aplicativo Android para uma ferramenta de trabalho segmentada por usuário. Cada usuário, ao fazer login, terá acesso a um dashboard personalizado contendo dados apenas dos contratos aos quais ele tem permissão, com navegação intuitiva para filtrar tipos de tarefas.

---

### Etapa 1: Backend - Permissões por Contrato

**Objetivo:** Permitir que administradores associem usuários a contratos específicos.

-   [ ] **Banco de Dados:** Criar uma tabela de associação (muitos-para-muitos) para conectar `usuarios` e `contratos`.
-   [ ] **Painel Web (React):** Modificar o formulário "Novo/Editar Usuário" para incluir um seletor de múltiplos contratos.
-   [ ] **API:** Criar/modificar endpoints que, ao receberem a identificação de um usuário, retornem dados (tarefas, indicadores) filtrados apenas para os contratos associados a ele.

---

### Etapa 2: App Android - Autenticação e Dashboard Personalizado

**Objetivo:** Implementar o fluxo de login e exibir o dashboard com dados específicos do usuário.

-   [ ] **Tela de Login:** Criar uma tela com campos para "usuário" e "senha".
-   [ ] **Autenticação:** Conectar a tela de login à API para validar as credenciais do usuário.
-   [ ] **Dashboard Principal:**
    -   Após o login, a tela principal deve buscar e exibir os dados do endpoint de dados do usuário.
    -   Desenvolver uma interface de usuário clara e organizada para os cards de "Progresso Geral" e "Indicadores", adaptada para a tela do celular.

---

### Etapa 3: App Android - Navegação por Tipo de Tarefa

**Objetivo:** Permitir que o usuário filtre as tarefas visualizadas no app.

-   [ ] **Menu de Navegação Inferior (Bottom Navigation Bar):**
    -   Implementar um menu fixo no rodapé da tela principal.
    -   Adicionar os botões iniciais: `Prev Mensal`, `Prev Semestral`, `Corretiva`, `Levant PMOC`.
-   [ ] **Funcionalidade de Filtro:**
    -   Ao clicar em um botão do menu, o app deve fazer uma nova requisição à API (ou filtrar os dados já carregados) para exibir apenas as tarefas do tipo selecionado.
    -   A estrutura deve ser flexível para permitir a adição de novos botões de filtro no futuro com o mínimo de esforço.


$checkpointText = @"

--- CHECKPOINT (16/07/2025) ---

### Resumo do Projeto e Objetivos
O objetivo principal é implementar um controle de acesso baseado em usuário para o aplicativo Android "Painel Auvo", permitindo que os usuários vejam apenas os dados dos contratos aos quais estão associados. Isso envolveu modificações no backend, no painel de administração web e no aplicativo Android.

### Modificações no Backend (Python/FastAPI)
1.  **Associação Usuário-Contrato:** Foi criada uma tabela de associação muitos-para-muitos (`usuario_contratos`) para vincular usuários a contratos (`customer_groups`).
2.  **Endpoints de Usuário:** Os endpoints `criar_usuario` e `editar_usuario` foram atualizados para gerenciar essas associações.
3.  **Endpoint de Login:** Foi criado um endpoint `/login` que autentica o usuário com nome de usuário e senha, retornando os detalhes do usuário, incluindo uma lista de IDs de contratos permitidos.
4.  **Endpoint de Dashboard em Lote:** Foi criado um endpoint `/api/dashboard/batch` que aceita uma lista de IDs de contrato e retorna dados agregados, otimizando as chamadas do aplicativo móvel.

### Modificações no Painel Web (React)
1.  **Gerenciamento de Usuários:** A página de edição/criação de usuários foi atualizada com um seletor múltiplo, permitindo que administradores associem facilmente um ou mais contratos a um usuário.

### Modificações no Aplicativo Android (Kotlin)
1.  **Fluxo de Login:**
    *   Foi criada uma `LoginActivity` com campos para usuário e senha, que agora é a tela de entrada do aplicativo (configurado no `AndroidManifest.xml`).
    *   A lógica de login foi implementada para chamar o endpoint `/login` do backend.
    *   Em caso de sucesso, o objeto `User` (que foi tornado `Serializable`) é passado para a `MainActivity`.
2.  **Tela Principal (MainActivity):**
    *   A `MainActivity` foi completamente refatorada para funcionar como um dashboard.
    *   Ela recebe o objeto `User` da `LoginActivity`.
    *   Utiliza a lista de contratos do usuário para chamar o novo endpoint `/api/dashboard/batch`.
    *   Atualmente, exibe os dados brutos (JSON) recebidos do backend, confirmando que todo o fluxo de dados está funcional.
3.  **Modelos e API:**
    *   Foram criados os modelos de dados necessários (`LoginRequest`, `DashboardBatchRequest`, etc.).
    *   A interface `ApiService` do Retrofit foi atualizada para incluir as novas chamadas de API (`login` e `getDashboardBatch`).

### Próximos Passos
*   Construir a interface de usuário (UI) do dashboard na `MainActivity` para exibir os dados de forma visualmente agradável (gráficos, indicadores, etc.) em vez do JSON bruto.
*   Implementar a barra de navegação inferior (`BottomNavigationView`) para filtrar os tipos de tarefas.
"@
Add-Content -Path 'appandroid.txt' -Value $checkpointText


# CHECKPOINT DE ATUALIZAÇÕES – 02/07/2025

Este arquivo registra todas as alterações importantes realizadas no painel (frontend, backend e banco de dados), para referência futura e suporte em caso de erros ou dúvidas. Use este documento para restaurar o funcionamento do painel caso surjam problemas.

---

## 1. Banco de Dados
- **Arquivo:** `auvo.db`
- **Tabelas principais:**
  - `equipments`: contém todos os equipamentos cadastrados.
    - Campos importantes: `id`, `name`, `associatedCustomerId` (vincula com a escola), `active` (1 = ativo, 0 = inativo), `identifier`.
  - `customers`: contém todas as escolas.
    - Campos: `id`, `description`, `groupsId` (vínculo com contrato).
  - `customer_groups`: contratos.
  - `tasks`, `task_types`: tarefas e tipos de tarefa.
- **Relacionamento:**
  - Cada equipamento é associado a uma escola pelo campo `associatedCustomerId` (deve ser igual ao `id` da escola em `customers`).
  - Cada escola pertence a um contrato pelo campo `groupsId` (string contendo o id do grupo/contrato).
- **Sincronização:**
  - O endpoint `/equipments/` deve estar incluído no processo de sincronização no arquivo `sync_auvo.py` para garantir que os equipamentos estejam atualizados no banco.
  - O campo `active` dos equipamentos deve ser corretamente preenchido (1 = ativo).

---

## 2. Backend (api_backend.py)
- O endpoint `/api/dashboard/{group_id}` retorna as escolas e equipamentos filtrando corretamente por contrato e por equipamentos ativos:
  - Busca equipamentos usando `associatedCustomerId` (não `customer_id`).
  - Soma apenas os equipamentos com `active = 1` para os KPIs.
- O endpoint `/api/escola/{school_id}/equipamentos-debug` pode ser usado para depuração de equipamentos por escola.
- Logs de depuração foram adicionados para validar a estrutura e quantidade de equipamentos retornados por escola.

---

## 3. Frontend (Dashboard.js)
- O KPI "Total de Equipamentos" agora soma diretamente todos os equipamentos ativos das escolas exibidas (`dashboardData.schools`).
- O KPI "Escolas na Visualização" mostra exatamente o número de escolas em `dashboardData.schools`.
- Os ícones especiais (PMOC, Mensal, Corretiva etc) aparecem no canto direito do resumo da escola.
- O botão de debug (ícone de bug) foi removido do canto direito do AccordionSummary.
- O frontend utiliza React + Material-UI e consome dados do backend via Axios.

---

## 4. Passos de Depuração Sugeridos
1. **Banco:**
   - Verifique se os equipamentos estão associados corretamente (`associatedCustomerId` igual ao `id` da escola) e se o campo `active` está correto.
   - Certifique-se de que a tabela `equipments` está sendo atualizada via sincronização.
2. **Backend:**
   - Confirme que o endpoint `/api/dashboard/{group_id}` retorna as escolas e os equipamentos ativos corretamente.
   - Use o endpoint de debug para checar equipamentos de uma escola específica.
3. **Frontend:**
   - Confira se os KPIs de equipamentos e escolas estão batendo com os dados reais exibidos.
   - Verifique a presença dos ícones especiais e a ausência do botão de debug.

---

**Este documento serve como referência para restaurar ou depurar o painel caso surjam problemas após atualizações.**

Data do checkpoint: 02/07/2025
Responsável: Cascade I.A.


# CHECKPOINT DE ATUALIZAÇÕES – 02/07/2025

Este arquivo registra todas as alterações importantes realizadas no painel (frontend, backend e banco de dados), para referência futura e suporte em caso de erros ou dúvidas. Use este documento para restaurar o funcionamento do painel caso surjam problemas.

---

## 1. Banco de Dados
- **Arquivo:** `auvo.db`
- **Tabelas principais:**
  - `equipments`: contém todos os equipamentos cadastrados.
    - Campos importantes: `id`, `name`, `associatedCustomerId` (vincula com a escola), `active` (1 = ativo, 0 = inativo), `identifier`.
  - `customers`: contém todas as escolas.
    - Campos: `id`, `description`, `groupsId` (vínculo com contrato).
  - `customer_groups`: contratos.
  - `tasks`, `task_types`: tarefas e tipos de tarefa.
- **Relacionamento:**
  - Cada equipamento é associado a uma escola pelo campo `associatedCustomerId` (deve ser igual ao `id` da escola em `customers`).
  - Cada escola pertence a um contrato pelo campo `groupsId` (string contendo o id do grupo/contrato).
- **Sincronização:**
  - O endpoint `/equipments/` deve estar incluído no processo de sincronização no arquivo `sync_auvo.py` para garantir que os equipamentos estejam atualizados no banco.
  - O campo `active` dos equipamentos deve ser corretamente preenchido (1 = ativo).

---

## 2. Backend (api_backend.py)
- O endpoint `/api/dashboard/{group_id}` retorna as escolas e equipamentos filtrando corretamente por contrato e por equipamentos ativos:
  - Busca equipamentos usando `associatedCustomerId` (não `customer_id`).
  - Soma apenas os equipamentos com `active = 1` para os KPIs.
- O endpoint `/api/escola/{school_id}/equipamentos-debug` pode ser usado para depuração de equipamentos por escola.
- Logs de depuração foram adicionados para validar a estrutura e quantidade de equipamentos retornados por escola.

---

## 3. Frontend (Dashboard.js)
- O KPI "Total de Equipamentos" agora soma diretamente todos os equipamentos ativos das escolas exibidas (`dashboardData.schools`).
- O KPI "Escolas na Visualização" mostra exatamente o número de escolas em `dashboardData.schools`.
- Os ícones especiais (PMOC, Mensal, Corretiva etc) aparecem no canto direito do resumo da escola.
- O botão de debug (ícone de bug) foi removido do canto direito do AccordionSummary.
- O frontend utiliza React + Material-UI e consome dados do backend via Axios.

---

## 4. Passos de Depuração Sugeridos
1. **Banco:**
   - Verifique se os equipamentos estão associados corretamente (`associatedCustomerId` igual ao `id` da escola) e se o campo `active` está correto.
   - Certifique-se de que a tabela `equipments` está sendo atualizada via sincronização.
2. **Backend:**
   - Confirme que o endpoint `/api/dashboard/{group_id}` retorna as escolas e os equipamentos ativos corretamente.
   - Use o endpoint de debug para checar equipamentos de uma escola específica.
3. **Frontend:**
   - Confira se os KPIs de equipamentos e escolas estão batendo com os dados reais exibidos.
   - Verifique a presença dos ícones especiais e a ausência do botão de debug.

---

**Este documento serve como referência para restaurar ou depurar o painel caso surjam problemas após atualizações.**

Data do checkpoint: 02/07/2025
Responsável: Cascade I.A.

# CHECKPOINT DE ATUALIZAÇÕES – 17/07/2025

## Objetivo da Sessão:
Refinar o dashboard do aplicativo Android para exibir dados de progresso de tarefas em tempo real, com base nos contratos do usuário logado, e realizar ajustes finos na interface do usuário para garantir consistência visual.

---

## 1. Backend (api_backend_android.py)

- **Cálculo Detalhado de Progresso de Tarefas:**
  - A função `_get_dashboard_by_contract_data` foi significativamente aprimorada.
  - Em vez de apenas contar o total de tarefas por tipo, a lógica agora calcula e retorna, para cada tipo de tarefa (PMOC, Corretiva, etc.), uma estrutura completa contendo:
    - `total`: Número total de tarefas.
    - `completed`: Número de tarefas concluídas (status 5 ou 6).
    - `percentage`: O percentual de conclusão calculado.

- **Correção de Erro Crítico (KeyError):**
  - Foi corrigido um erro `KeyError: 'count'` que causava a falha do endpoint `/api/dashboard/batch`.
  - O erro ocorreu porque, após a refatoração da estrutura de dados, o código ainda tentava ordenar a lista de tarefas por uma chave (`count`) que não existia mais.
  - A ordenação foi ajustada para usar a chave `total`, resolvendo o problema.

---

## 2. Aplicativo Android (Kotlin & XML)

- **Exibição de Dados Reais de Progresso:**
  - O aplicativo agora exibe o progresso real das tarefas, em vez de dados estáticos (0/0).
  - **Modelo de Dados (`Dashboard.kt`):** A classe `TaskTypeKPI` foi atualizada para incluir os novos campos (`id`, `total`, `completed`, `percentage`) enviados pelo backend.
  - **Lógica da UI (`MainActivity.kt`):** A função `updateUi` foi ajustada para passar os valores dinâmicos `kpi.completed` e `kpi.total` para a função que cria os itens da lista.

- **Adição de Barra de Progresso Visual:**
  - **Layout (`list_item_task_progress.xml`):** O layout de cada item na lista de "Progresso de Tarefas" foi modificado para incluir uma `ProgressBar` horizontal.
  - **Lógica da UI (`MainActivity.kt`):** A função `createTaskListItem` foi atualizada para encontrar a nova `ProgressBar` por seu ID e definir seu progresso com base no percentual recebido do backend.

- **Ajuste Fino de Alinhamento da UI:**
  - **Layout (`indicator_card_item.xml`):** Foi corrigido um desalinhamento visual nos cartões de indicadores principais ("Total de Tarefas", "Total de Equipamentos", etc.).
  - A correção foi feita adicionando a propriedade `android:lines="2"` ao `TextView` do título, forçando todos os cartões a terem a mesma altura e alinhando seu conteúdo verticalmente.

---

## Estado Atual:
O fluxo completo, desde o login do usuário no Android até a exibição de um dashboard funcional, visualmente polido e com dados em tempo real, está implementado e funcionando corretamente. O backend serve os dados corretos e o aplicativo os exibe de forma precisa e esteticamente agradável.

**Próximos Passos (Sugestão):**
- Implementar a funcionalidade de filtro da barra de navegação inferior (`BottomNavigationView`) que já está na UI.
- Adicionar mais interatividade ou detalhes ao clicar nos itens do dashboard.

# CHECKPOINT DE ATUALIZAÇÕES – 17/07/2025 (ATUALIZAÇÃO)

## Implementações Realizadas:

### 1. Funcionalidade de Filtro na Barra de Navegação Inferior
- Implementação completa da funcionalidade de filtro na `BottomNavigationView`
- Adição de estado visual para indicar o filtro ativo
- Configuração do item Home como selecionado por padrão ao iniciar o aplicativo
- Feedback visual (Snackbar) quando o usuário muda de filtro
- Cabeçalho indicativo do filtro ativo na tela

### 2. Interatividade nos Itens do Dashboard
- Adição de interatividade aos itens da lista de tarefas (clique para ver detalhes)
- Criação da `TaskDetailsActivity` para exibir detalhes completos de uma tarefa
- Interface de detalhes com informações completas sobre a tarefa selecionada
- Botão para visualizar lista completa de tarefas (preparado para implementação futura)

### 3. Melhorias Visuais
- Barras de progresso com cores diferentes baseadas no percentual de conclusão:
  - Verde para progresso bom (≥ 75%)
  - Amarelo para progresso médio (≥ 50%)
  - Vermelho para progresso baixo (< 50%)
- Mensagens informativas quando não há tarefas para o filtro selecionado
- Adição de cores do Material Design para consistência visual

### 4. Refatoração de Código
- Refatoração do método `createTaskListItem` para receber diretamente o objeto `TaskTypeKPI`
- Melhoria na organização do código para facilitar manutenção
- Tratamento para casos em que não há tarefas para o filtro selecionado

## Arquivos Modificados/Criados:
1. `MainActivity.kt` - Implementação do filtro e interatividade
2. `colors.xml` - Adição de cores para barras de progresso
3. `TaskDetailsActivity.kt` (novo) - Activity para exibir detalhes de tarefas
4. `activity_task_details.xml` (novo) - Layout para a tela de detalhes
5. `AndroidManifest.xml` - Registro da nova Activity

## Próximos Passos:
1. Implementar a funcionalidade de listar todas as tarefas de um determinado tipo
2. Adicionar mais estatísticas e gráficos na tela de detalhes
3. Implementar cache de dados para funcionamento offline
4. Adicionar animações de transição entre telas
5. Implementar notificações para tarefas pendentes


# CHECKPOINT DE ATUALIZAÇÕES – 17/07/2025 (ATUALIZAÇÃO)

## Implementações Realizadas:

### 1. Funcionalidade de Filtro na Barra de Navegação Inferior
- Implementação completa da funcionalidade de filtro na `BottomNavigationView`
- Adição de estado visual para indicar o filtro ativo
- Configuração do item Home como selecionado por padrão ao iniciar o aplicativo
- Feedback visual (Snackbar) quando o usuário muda de filtro
- Cabeçalho indicativo do filtro ativo na tela

### 2. Interatividade nos Itens do Dashboard
- Adição de interatividade aos itens da lista de tarefas (clique para ver detalhes)
- Criação da `TaskDetailsActivity` para exibir detalhes completos de uma tarefa
- Interface de detalhes com informações completas sobre a tarefa selecionada
- Botão para visualizar lista completa de tarefas (preparado para implementação futura)

### 3. Melhorias Visuais
- Barras de progresso com cores diferentes baseadas no percentual de conclusão:
  - Verde para progresso bom (≥ 75%)
  - Amarelo para progresso médio (≥ 50%)
  - Vermelho para progresso baixo (< 50%)
- Mensagens informativas quando não há tarefas para o filtro selecionado
- Adição de cores do Material Design para consistência visual

### 4. Refatoração de Código
- Refatoração do método `createTaskListItem` para receber diretamente o objeto `TaskTypeKPI`
- Melhoria na organização do código para facilitar manutenção
- Tratamento para casos em que não há tarefas para o filtro selecionado

## Arquivos Modificados/Criados:
1. `MainActivity.kt` - Implementação do filtro e interatividade
2. `colors.xml` - Adição de cores para barras de progresso
3. `TaskDetailsActivity.kt` (novo) - Activity para exibir detalhes de tarefas
4. `activity_task_details.xml` (novo) - Layout para a tela de detalhes
5. `AndroidManifest.xml` - Registro da nova Activity

## Próximos Passos:
1. Implementar a funcionalidade de listar todas as tarefas de um determinado tipo
2. Adicionar mais estatísticas e gráficos na tela de detalhes
3. Implementar cache de dados para funcionamento offline
4. Adicionar animações de transição entre telas
5. Implementar notificações para tarefas pendentes


# Esquema do Banco de Dados: auvo.db
# Este arquivo documenta a estrutura das tabelas e seus relacionamentos.

# ----------------------------------------
# Tabela: customer_groups (Contratos)
# ----------------------------------------
# Armazena os contratos principais.

CREATE TABLE customer_groups (
    id INTEGER PRIMARY KEY,      -- ID único do contrato
    description TEXT             -- Nome/descrição do contrato (ex: STS36693/22 SETOR 01)
);

# ----------------------------------------
# Tabela: customers (Escolas/Clientes)
# ----------------------------------------
# Armazena os clientes (escolas), que são associados a um ou mais contratos.

CREATE TABLE customers (
    id INTEGER PRIMARY KEY,                  -- ID único do cliente/escola
    description TEXT,                        -- Nome da escola
    groupsId TEXT,                           -- JSON string com IDs de 'customer_groups' (ex: "[156750]")
    managersId TEXT,                         -- JSON string com IDs de 'users' (colaboradores responsáveis)
    externalId TEXT,
    cpfCnpj TEXT,
    phoneNumber TEXT,
    email TEXT,
    manager TEXT,
    managerJobPosition TEXT,
    note TEXT,
    address TEXT,
    latitude REAL,
    longitude REAL,
    maximumVisitTime INTEGER,
    unitMaximumTime INTEGER,
    managerTeamsId TEXT,
    segmentId INTEGER,
    active INTEGER,
    adressComplement TEXT,
    creationDate TIMESTAMP,
    contacts TEXT,
    dateLastUpdate TIMESTAMP,
    uriAnexos TEXT,
    uriAttachments TEXT
);

# ----------------------------------------
# Tabela: users (Colaboradores)
# ----------------------------------------
# Armazena os usuários/colaboradores.

CREATE TABLE users (
    userId INTEGER PRIMARY KEY,              -- ID único do colaborador
    name TEXT,                               -- Nome do colaborador
    externalId TEXT,
    smartphoneNumber TEXT,
    login TEXT,
    email TEXT,
    culture TEXT,
    jobPosition TEXT,
    employeeNotification TEXT
);

# ----------------------------------------
# Tabela: equipments (Equipamentos)
# ----------------------------------------
# Armazena os equipamentos, associados a uma escola.

CREATE TABLE equipments (
    id INTEGER PRIMARY KEY,                  -- ID único do equipamento
    name TEXT,                               -- Nome do equipamento
    associated_customer_id INTEGER,          -- Chave estrangeira para 'customers.id'
    tipo TEXT,
    setor_id INTEGER,
    ativo INTEGER,
    identificador TEXT
);

# ----------------------------------------
# Tabela: task_types (Tipos de Tarefa)
# ----------------------------------------
# Define os diferentes tipos de tarefas que podem ser executadas.

CREATE TABLE task_types (
    id INTEGER PRIMARY KEY,                  -- ID único do tipo de tarefa
    description TEXT,                        -- Nome/descrição do tipo de tarefa
    creatorId INTEGER,
    creationDate TIMESTAMP,
    standardTime TEXT,
    toleranceTime TEXT,
    standardQuestionnaireId INTEGER,
    active INTEGER,
    sendSatisfactionSurvey INTEGER,
    requirements TEXT,
    dateLastUpdate TEXT,
    externalId TEXT,
    color TEXT,
    standartQuestionnaireId INTEGER,
    standartTime TEXT
);

# ----------------------------------------
# Tabela: tasks (Tarefas)
# ----------------------------------------
# Armazena as tarefas a serem executadas, ligando colaboradores, escolas e equipamentos.

CREATE TABLE tasks (
    id INTEGER PRIMARY KEY,
    app_id INTEGER,
    app_key TEXT,
    status TEXT,
    date_start TIMESTAMP,
    date_end TIMESTAMP,
    task_type_id INTEGER,
    task_type_description TEXT,
    customer_id INTEGER,
    customer_name TEXT,
    customer_group_id INTEGER,
    customer_group_name TEXT,
    user_id INTEGER,
    user_name TEXT,
    user_email TEXT,
    form_id INTEGER,
    form_name TEXT,
    form_answers TEXT, -- Armazenado como JSON string
    date_last_update TIMESTAMP,
    externalId TEXT,
    idUserFrom INTEGER,                      -- Usuário que criou
    idUserTo INTEGER,                        -- Usuário responsável (quem executa)
    userToName TEXT,                         -- Nome do responsável
    userFromName TEXT,                       -- Nome de quem criou
    customerId INTEGER,                      -- Escola
    customerExternalId TEXT,
    customerDescription TEXT,
    taskType INTEGER,                        -- Tipo (ID)
    taskTypeDescription TEXT,                -- Tipo (nome)
    creationDate TIMESTAMP,                  -- Data de criação
    taskDate TIMESTAMP,                      -- Data planejada
    latitude REAL,
    longitude REAL,
    address TEXT,
    orientation TEXT,
    priority INTEGER,
    deliveredOnSmarthPhone INTEGER,          -- Booleano
    deliveredDate TIMESTAMP,
    finished INTEGER,                        -- Booleano: tarefa finalizada
    report TEXT,
    visualized INTEGER,                      -- Booleano
    visualizedDate TIMESTAMP,
    checkIn INTEGER,                         -- Booleano: houve check-in
    checkInDate TIMESTAMP,
    checkOut INTEGER,                        -- Booleano: houve check-out
    checkOutDate TIMESTAMP,
    checkinType INTEGER,
    equipmentsId TEXT,                       -- Equipamentos (JSON)
    keyWords TEXT,                           -- Palavras-chave (JSON)
    keyWordsDescriptions TEXT,               -- Palavras-chave descrições (JSON)
    inputedKm REAL,
    adoptedKm REAL,
    attachments TEXT,                        -- Anexos (JSON)
    questionnaires TEXT,                     -- Questionários (JSON)
    signatureUrl TEXT,                       -- URL da assinatura (imagem)
    checkInDistance REAL,
    checkOutDistance REAL,
    sendSatisfactionSurvey INTEGER,          -- Booleano
    survey TEXT,
    taskUrl TEXT,                            -- Link da tarefa
    pendency TEXT,
    dateLastUpdate TIMESTAMP,
    ticketId INTEGER,
    ticketTitle TEXT,
    signatureName TEXT,                      -- Nome de quem assinou
    signatureDocument TEXT,                  -- Documento de quem assinou
    expense TEXT,
    duration TEXT,
    durationDecimal TEXT,
    displacementStart TEXT,
    products TEXT,                           -- Produtos (JSON)
    services TEXT,                           -- Serviços (JSON)
    additionalCosts TEXT,                    -- Custos adicionais (JSON)
    summary TEXT,                            -- Resumo (JSON)
    estimatedDuration TEXT,
    financialCategory TEXT,
    taskStatus INTEGER,                      -- Status da tarefa
    openedOnLocation INTEGER,
    lastUpdate TEXT,
    is_link_valid INTEGER,
    FOREIGN KEY (idUserFrom) REFERENCES users(userId),
    FOREIGN KEY (idUserTo) REFERENCES users(userId),
    FOREIGN KEY (customerId) REFERENCES customers(id)
);

# ----------------------------------------
# Tabela: billing_rates (Taxas de Faturamento)
# ----------------------------------------
# Armazena os preços (unitário e adicional) para cada tipo de serviço por contrato.

CREATE TABLE billing_rates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    contract_id INTEGER NOT NULL,
    description TEXT NOT NULL,
    unit_price REAL DEFAULT 0,
    additional_price REAL DEFAULT 0,
    UNIQUE(contract_id, description)
);

# ----------------------------------------
# Tabela: billing_adjustments (Ajustes de Faturamento)
# ----------------------------------------
# Armazena outros custos ou ajustes por contrato, como taxas de equipamento.

CREATE TABLE billing_adjustments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    contract_id INTEGER NOT NULL,
    description TEXT NOT NULL,
    value REAL DEFAULT 0,
    UNIQUE(contract_id, description)
);


# Campos relevantes para análise de finalização/assinatura:
# - finished: Flag de finalização (0/1)
# - taskStatus: Status numérico (ex: 5 = Finalizada)
# - checkIn, checkInDate, checkOut, checkOutDate: Flags e datas de check-in/out
# - signatureName: Nome de quem assinou
# - signatureUrl: Imagem da assinatura
# - signatureDocument: Documento do assinante
# - userToName: Nome do responsável pela execução



# ========================================
# Resumo dos Relacionamentos Principais
# ========================================
# 1. Contrato -> Escola: `customer_groups.id` está em `customers.groupsId`.
# 2. Escola -> Colaborador: `users.userId` está em `customers.managersId`.
# 3. Escola -> Equipamento: `customers.id` é `equipments.associated_customer_id`.
# 4. Tarefa -> Escola: `customers.id` é `tasks.customerId`.
# 5. Tarefa -> Colaborador: `users.userId` é `tasks.idUserTo`.
# 6. Tarefa -> Tipo de Tarefa: `task_types.id` é `tasks.taskType`.
# ========================================

# ========================================
# Adendo ao Schema - Detalhes da Tabela 'tasks'
# ========================================
# Coluna `taskUrl`:
#   - Contém o link direto para a página da tarefa na plataforma Auvo.
#
# Coluna `taskStatus`:
#   - Representa o status da tarefa como um valor numérico.
#   - Mapeamento de valores:
#     - 1: Aberta
#     - 2: Em Deslocamento
#     - 3: Check-in
#     - 4: Check-out
#     - 5: Finalizada
#     - 6: Pausada
# ========================================

# ========================================
# Estrutura Final da Resposta da API (JSON)
# ========================================
# Endpoint: /api/dashboard/contrato/{group_id}
#
# Descreve o objeto JSON retornado pelo backend. O frontend (Dashboard.js)
# é construído para consumir dados exatamente neste formato.
#
# {
#   "contract": { ... },       // Objeto com detalhes do contrato selecionado.
#   "indicators": { ... },     // Objeto com os KPIs (indicadores) do painel.
#   "schools": [ ... ],        // Array de objetos, onde cada objeto representa uma escola.
#   "collaborators": [ ... ]   // Array de objetos, onde cada objeto representa um colaborador.
# }
#
# --- Detalhes da Estrutura ---
#
# 1. indicators:
#    - "total_schools": (Integer) Número total de escolas no contrato.
#    - "total_collaborators": (Integer) Número total de colaboradores únicos.
#    - "total_equipments": (Integer) Número total de equipamentos.
#    - "total_tasks": (Integer) Número total de tarefas.
#    - "completion_rate": (Float) Percentual de tarefas concluídas.
#    - "task_type_kpis": [
#        { "id": (Integer), "description": (String), "count": (Integer) }
#      ]
#
# 2. schools:
#    - Array de objetos, cada um com a seguinte estrutura:
#    {
#      "school_info": { ... }, // Objeto com todos os campos da tabela 'customers'.
#      "equipments": [         // Array de equipamentos da escola.
#        {
#          "id": (Integer),
#          "name": (String),
#          "identificador": (String),
#          "categoryName": (String) // Derivado do campo 'tipo'.
#        }
#      ],
#      "tasks": [              // Array de tarefas associadas à escola.
#        {
#          "taskID": (Integer),
#          "taskTypeDescription": (String), // Descrição do tipo de tarefa.
#          "taskStatus": (Integer),         // Código numérico do status.
#          "date": (String: ISO Date),      // Data da tarefa.
#          "taskUrl": (String)              // Link direto para a tarefa.
#        }
#      ],
#      "metrics": {              // Objeto com métricas de desempenho da escola.
#        "ativos": (Integer),      // Total de equipamentos ativos na escola.
#        "realizadas": (Integer),  // Total de equipamentos únicos com tarefas finalizadas.
#        "percentual": (Float)     // Percentual de conclusão (realizadas / ativos).
#      }
#    }
#
# 3. collaborators:
#    - Array de objetos, cada um com a seguinte estrutura:
#    {
#      "userId": (Integer),
#      "name": (String),
#      "tasks": [ ... ] // Array de tarefas atribuídas a este colaborador.
#    }
#

# ========================================
# Histórico de Modificações
# ========================================
#
# ---
# Data: 10/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Criação do Painel Administrativo de Faturamento.
#
# 1. Backend (api_backend.py):
#    - Adicionadas novas tabelas ao banco de dados: `billing_rates` e `billing_adjustments` para armazenar configurações de faturamento sem alterar o schema existente.
#    - Criados novos endpoints:
#      - `/api/billing/rates/{contract_id}` (GET): Para buscar as taxas de um contrato.
#      - `/api/billing/rates` (POST): Para salvar as taxas de um contrato.
#      - `/api/billing/task-types` (GET): Para buscar os tipos de tarefa faturáveis, filtrados por uma lista de IDs pré-definida.
#
# 2. Frontend (BillingAdmin.js & Sidebar.js):
#    - Adicionado um novo item de menu "Admin Faturamento" na barra lateral.
#    - Criada a nova página `BillingAdmin.js` para permitir a gestão das taxas de faturamento.
#    - A página busca dinamicamente os contratos e os tipos de tarefa faturáveis da API.
#    - Implementado um filtro que exibe apenas os serviços relevantes para o contrato selecionado, com base na nomenclatura.
#    - Permite a edição e salvamento dos preços unitários e adicionais para cada serviço.
#
# ---
# Data: 10/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Criação da Página de Visão Consolidada e Tabela de Equipamentos.
#
# 1. Frontend (ConsolidatedView.js & EquipmentTable.js):
#    - Criada uma nova página, `ConsolidatedView.js`, para fornecer uma visão geral do status dos contratos.
#    - Desenvolvido um novo componente, `EquipmentTable.js`, que é o principal elemento da nova página.
#    - A `EquipmentTable` busca os dados de todos os contratos via endpoint da API e os processa para exibir métricas detalhadas.
#    - As métricas incluem:
#      - Quantidade prevista vs. realizada para manutenções preventivas (mensal e semestral).
#      - Percentual de conclusão.
#      - Contagem de manutenções corretivas.
#      - Estimativas de dias de trabalho restantes para concluir as tarefas pendentes.
#    - O componente agrupa os dados por contrato/setor e apresenta uma tabela clara para cada um, facilitando a análise de desempenho.
#
# 2. Backend (api_backend.py):
#    - O endpoint que serve os dados para esta visão foi ajustado para garantir que todos os contratos ativos sejam retornados com os campos necessários para os cálculos no frontend.
#
# ---

# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Implementação de Métricas de Desempenho por Escola.
#
# 1. Backend (api_backend.py):
#    - A função `_get_dashboard_by_contract_data` foi atualizada para calcular novas métricas para cada escola.
#    - Um novo campo "metrics" foi adicionado à resposta da API para cada escola, contendo:
#      - "ativos": Contagem total de equipamentos associados à escola.
#      - "realizadas": Contagem de equipamentos *únicos* que aparecem em questionários de tarefas com status "Finalizada" (código 5).
#      - "percentual": Cálculo de (realizadas / ativos) * 100.
#
# 2. Frontend (Dashboard.js):
#    - A visualização das escolas foi reestruturada para um formato de tabela/acordeão.
#    - A linha principal de cada escola agora exibe as novas métricas (Ativos, Realizadas, Percentual), permitindo uma visão rápida do desempenho.
#    - A funcionalidade de expandir a linha para ver detalhes de equipamentos e tarefas foi mantida.
#
# 3. Estrutura da API (JSON):
#    - O objeto de cada escola no array "schools" foi atualizado para incluir o objeto "metrics", conforme detalhado na seção "Estrutura Final da Resposta da API (JSON)".

# ---
# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Implementação de Filtragem e Ordenação Dinâmica no Frontend.
#
# 1. Frontend (Dashboard.js):
#    - Adicionada lógica para filtrar escolas com base no "Tipo de Tarefa" selecionado.
#    - Ao aplicar um filtro, as métricas de "Realizadas" e "% Realizadas" são recalculadas dinamicamente no frontend para refletir apenas as tarefas do tipo selecionado.
#    - A lista de escolas é reordenada para exibir primeiro as com menor percentual de conclusão, destacando as que precisam de mais atenção.
#    - Apenas escolas que possuem tarefas do tipo selecionado são exibidas.

# ---
# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Filtragem de Equipamentos Ativos no Backend.
#
# 1. Backend (api_backend.py):
#    - A consulta SQL que busca os equipamentos foi modificada para incluir a condição `AND ativo = 1`.
#    - Isso garante que apenas equipamentos marcados como ativos no banco de dados sejam retornados pela API e considerados nos cálculos de métricas.

# ---
# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Lógica de Inclusão de Colaboradores no Painel.
#
# 1. Backend (api_backend.py):
#    - A função `_get_dashboard_by_contract_data` foi alterada para corrigir uma falha que impedia a exibição de colaboradores que não eram gerentes de escolas.
#    - Anteriormente, apenas usuários listados no campo `managersId` das escolas eram buscados.
#    - A nova lógica primeiro busca todas as tarefas associadas às escolas do contrato e, a partir delas, extrai os IDs de todos os usuários (`idUserTo`).
#    - Esses IDs são combinados com os IDs dos gerentes para formar uma lista completa de colaboradores, garantindo que qualquer usuário com uma tarefa atribuída no contrato seja exibido no painel, como no caso do usuário Gabriel (ID 187117).

# ---
# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Refinamentos e Correções no Frontend (Dashboard.js).
#
# 1. Correção de Erro de Referência:
#    - Corrigido um `ReferenceError` que ocorria durante a computação de `processedData` devido a uma variável `indicators` indefinida.
#
# 2. Lógica de Filtro de Tarefas:
#    - Ajustada a lógica de filtro para que, ao selecionar "Todos os Tipos", todas as tarefas sejam exibidas corretamente.
#
# 3. Visualização de Percentual:
#    - Adicionada codificação por cores (vermelho, laranja, amarelo, verde) ao fundo do percentual de conclusão para melhor visualização do status.
#
# 4. Validação de Link de Tarefa:
#    - A data da tarefa agora considera `checkInDate` ou `lastUpdate`.
#    - O ícone de link para o relatório da tarefa só é exibido se uma dessas datas for válida, evitando links quebrados.
#
# 5. Filtragem de Equipamentos Ativos:
#    - A lista de equipamentos em cada escola agora exibe apenas os itens com `ativo = 1`.
#    - O título do acordeão foi atualizado para "Equipamentos Ativos" e a contagem reflete apenas os ativos.
#
# 6. Atualização da Barra de Resumo da Escola:
#    - A barra de resumo de cada escola foi modificada para exibir "Ativos: [N] | Tarefas: [N]", refletindo a contagem de equipamentos ativos e o total de tarefas filtradas.

# ---
# Data: 04/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Dashboard Responsiveness e Melhorias de UI
#
# 1. Remoção de IDs Numéricos dos Nomes das Escolas:
#    - Adicionamos a função `cleanSchoolName` para remover IDs numéricos (ex: `[112846, 112845] - `) do início dos nomes das escolas.
#    - Aplicamos esta função no componente SchoolRow para exibir nomes de escolas mais limpos e amigáveis.
#
# 2. Melhorias de Responsividade:
#    - Cabeçalho do Dashboard:
#      * Reorganizamos o seletor de contrato e os campos de data para ficarem lado a lado em telas maiores.
#      * Implementamos layout flexível que se adapta a diferentes tamanhos de tela.
#    - SchoolRow:
#      * Melhoramos o layout do AccordionSummary para adaptar a direção flex e espaçamento baseado no tamanho da tela.
#      * Centralizamos elementos de texto em telas pequenas e alinhamos à esquerda em telas maiores.
#      * Adicionamos truncamento de texto com tooltips para evitar quebras de layout.
#
# 3. Tabelas de Equipamentos e Tarefas:
#    - Equipamentos:
#      * Envolvemos as tabelas em containers com largura máxima controlada e overflow para evitar quebras de layout.
#      * Adicionamos truncamento e tooltips para colunas de nome e identificador.
#      * Melhoramos o toggle para mostrar apenas equipamentos ativos.
#    - Tarefas:
#      * Implementamos ordenação de tarefas por data (mais recente primeiro).
#      * Adicionamos truncamento, tooltips e larguras responsivas para colunas.
#      * Garantimos que links de tarefas abram em novas abas.
#
# 4. Comportamento dos Acordeões:
#    - Removemos a expansão automática dos acordeões de Equipamentos e Tarefas.
#    - Alinhamos os títulos dos acordeões à esquerda para melhor organização visual.
#
# 5. Importações e Dependências:
#    - Adicionamos importações faltantes como `FormControlLabel` e `Switch` do Material-UI.
#    - Mantivemos consistência no uso de componentes MUI para estilo e layout.
#
# 6. Correções de Bugs:
#    - Corrigimos erros de referência a componentes não definidos.
#    - Garantimos que todos os componentes tenham as propriedades necessárias.

# ---
# Data: 04/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Correção da Lógica de Progresso por Escola
#
# 1. Filtro de Tipos de Tarefas Válidas para Progresso (Frontend – Dashboard.js):
#    - Criada a constante `ALLOWED_PROGRESS_TASKS` contendo as descrições (case-insensitive):
#      * "Preventiva Mensal"
#      * "Mensal"
#      * "Semestral"
#      * "Preventiva Semestral"
#    - A função `getSchoolPercentual` agora:
#      * Filtra tarefas pelo intervalo de datas selecionado E pela existência de link válido.
#      * Mantém somente as tarefas cujo `orientation` contenha algum desses termos.
#      * Calcula `finished` considerando status 5 ou 6.
#      * Utiliza `progressTasks.length` como denominador, garantindo porcentagem correta.
#
# 2. Atualização do Componente `SchoolRow`:
#    - A cor de fundo e o valor exibido do percentual passam `dateRange.start` / `dateRange.end` para `getSchoolPercentual`, assegurando coerência com o filtro de datas.
#
# 3. Efeito Prático:
#    - A barra de progresso apresenta agora a porcentagem correta, baseada unicamente nas tarefas mensais/semestrais relevantes.
#    - As cores (verde, amarelo, laranja, vermelho) refletem com precisão o status de conclusão após o novo cálculo.
#
# 4. Possíveis Pontos de Falha Futuros:
#    - Se novos tipos de tarefas precisarem contar para o progresso, basta adicionar a descrição na lista `ALLOWED_PROGRESS_TASKS`.
#    - Caso a API altere a nomenclatura de `orientation`, será necessário ajustar o filtro para manter a compatibilidade.

# ---
# Data: 04/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Inclusão de KPIs Mensal / Semestral / PMOC / Corretiva e Ajustes de Layout
#
# 1. Novos KPIs (Frontend – Dashboard.js):
#    - Criados helpers `computeCustomKpis` e `renderCustomKpiCards`.
#    - Adicionadas métricas:
#        * Preventiva Mensal (% de equipamentos com tarefa Mensal ou Semestral concluída no mês).
#        * Preventiva Semestral (% de equipamentos com tarefa Semestral concluída no mês; denominador = 478/6 ≈ 79).
#        * PMOC (% de equipamentos com PMOC concluída acumulado desde mar/2025).
#        * Corretivas (quantidade de tarefas Corretivas concluídas no mês).
#    - Lógica robusta: identifica tarefas por `taskType` ID OU palavras-chave em `orientation`.
#
# 2. Barra de Progresso Escolar:
#    - `getSchoolPercentual` agora usa IDs + keywords para contar Mensal/Semestral.
#
# 3. Layout de Indicadores:
#    - Removido card "Tarefas Concluídas" para manter 4 cartões na primeira linha.
#    - Ajustado Grid para `md=3`, garantindo alinhamento 4×3 colunas.
#
# 4. Dependências:
#    - Ícones adicionados: `EventRepeatIcon`, `CalendarViewWeekIcon`, `ArticleIcon`, `BuildIcon`.
#
# 5. Possíveis Ajustes Futuros:
#    - Caso o total de equipamentos (478) se altere, atualizar a constante `KPI_TOTAL_EQUIP`.
#    - Para adicionar novos tipos de tarefa, incluir IDs/keywords em `KPI_CATEGORIES`.

# -----------------------------------------------------------------------------
# Data: 04/07/2025
# Responsável: Cascade
# Checkpoint: Dash KPIs – Excedentes e UX
# -----------------------------------------------------------------------------
# 1. Excedentes em KPIs:
#    - `computeCustomKpis` passou a calcular `mensalEx`, `semestralEx`, `pmocEx` (equipamentos além do denominador).
#    - Valor percentual permanece 100 % (cap em 100) e `done` exibido = `total`.
#    - Excedentes mostrados em badge vermelho ao lado do KPI.
#    - Lista detalhada reunida por helper `getExcedentEquipments`; abre em diálogo.
#
# 2. UI/UX:
#    - `KpiCard` recebeu prop `extra` para renderizar badge + ícone.
#    - Ícone com `Tooltip` "Excedentes" (hover) e `Badge` indicando quantidade.
#    - Click no ícone chama `openExDialog`, exibindo `Dialog` com lista de equipamentos excedentes ("Escola – id").
#
# 3. Valores Exibidos:
#    - Formato invertido para `total/realizado` (ex: 478/478), usando `Math.min(done, total)`.
#    - Excedente permanece visível somente via badge.
#
# 4. Helpers Adicionados (Dashboard.js):
#    - `parseEquipIds` – normaliza `equipmentsId` em array.
#    - `getExcedentEquipments` – gera lista filtrando por período/category e recortando itens extras.
#
# 5. Acessibilidade & Layout:
#    - `Tooltip` em todos os ícones de excedente.
#    - Removida duplicidade de cabeçalho; `renderHeader` é chamado apenas uma vez.
#
# 6. Como Reverter / Ajustar:
#    - Para ocultar excedente completamente, remova badge + ícone em `renderCustomKpiCards`.
#    - Para alterar texto do Tooltip, edite string "Excedentes".
#    - Para mudar denominadores (ex: novos equipamentos), altere `KPI_CATEGORIES`.
# -----------------------------------------------------------------------------

# Data: 04/07/2025
# Responsável: Cascade
# Checkpoint: Planner Semestral & Exportação Excel
# -----------------------------------------------------------------------------
# 1. Nova Página `SemestralPlanner` (frontend):
#    - Menu lateral "Semestral" adicionado ao `Sidebar` (ícone CalendarViewWeek).
#    - Rota `/semestral` registrada em `App.js`.
#    - Página lista, por escola, a quantidade de equipamentos ATIVOS sem Preventiva Semestral no período selecionado.
#    - Expansor permite ver lista de equipamentos pendentes por escola.
#    - Filtros: contrato + data início/fim.
#
# 2. Exportação Excel:
#    - Botão "Exportar Excel" gera planilha `pendentes_semestral_<contrato>_<start>_<end>.xlsx`.
#    - Implementado via biblioteca `xlsx` (SheetJS). Dependência instalada com `npm install xlsx`.
#
# 3. Helpers reutilizados/adicionados:
#    - `parseEquipIds`, `matchesCategory`, `isInPeriod` replicados para página.
#    - Equipamento exibido pelo campo `name` (fallback `description`).
#
# 4. Correções:
#    - Importado `IconButton`, `Button` e ícones de seta (up/down) para evitar erros de runtime.
#    - Corrigido aninhamento de Grid/Paper no JSX.
#
# 5. Observações de Segurança:
#    - Dependência `xlsx` adicionada; `npm audit` indica 10 vulnerabilidades (3 mod/7 high). Avaliar.
# -----------------------------------------------------------------------------

# =============================================================================
# SEPARAÇÃO DE USUÁRIOS DO PAINEL E USUÁRIOS DA AUVO
# =============================================================================
# A partir de julho/2025, o painel administrativo utiliza uma tabela exclusiva
# para autenticação e controle de acesso dos usuários do painel:
#
#   CREATE TABLE IF NOT EXISTS usuarios_painel (
#       id INTEGER PRIMARY KEY AUTOINCREMENT,
#       nome_completo TEXT NOT NULL,
#       cpf TEXT NOT NULL UNIQUE,
#       data_nascimento TEXT,
#       foto TEXT,
#       username TEXT NOT NULL UNIQUE,
#       senha_hash TEXT NOT NULL,
#       permissoes TEXT NOT NULL -- JSON de abas permitidas
#   );
#
# - Esta tabela é gerenciada apenas pelo backend FastAPI do painel.
# - Não interfere e não é sobrescrita pelo processo de sincronização da Auvo.
# - Os endpoints de CRUD de usuários do painel usam exclusivamente esta tabela.
#
# A tabela 'users' permanece dedicada aos usuários sincronizados da Auvo,
# e nunca deve ser alterada pelo painel administrativo.
# =============================================================================

# =============================================================================
# ATUALIZAÇÃO DA PÁGINA DE RELATÓRIO DE FATURAMENTO (11/07/2025)
# =============================================================================
# A página FaturamentoReport.js foi atualizada para replicar a funcionalidade do
# Dashboard.js, com melhorias na interface e organização dos dados:
#
# 1. Integração com API:
#    - Utiliza o endpoint `/dashboard/{contractId}` com parâmetros de data
#    - Replica a lógica de desduplicação, agrupamento e cálculo de KPIs do Dashboard
#
# 2. Estrutura de Dados:
#    - Processa tarefas para mostrar apenas as do mês atual
#    - Identifica tarefas pendentes para o fim do mês (7 últimos dias)
#    - Calcula indicadores globais: total de escolas, tarefas, concluídas, abertas
#    - Extrai lista completa de colaboradores com suas estatísticas
#
# 3. Interface do Usuário:
#    - Todas as seções principais são expansíveis (Accordion):
#      * Resumo do Mês Atual (expandido por padrão)
#      * Colaboradores (expandido por padrão)
#      * Tarefas pendentes para o fim do mês (expandido por padrão)
#      * Escolas (recolhido por padrão)
#    - Seção de escolas com:
#      * Botões para expandir/recolher todas as escolas
#      * Cada escola expansível individualmente
#      * Detalhes por escola: métricas, colaboradores e tarefas
#    - Tabelas de tarefas mostram:
#      * Coluna "Tarefa" exibindo o campo `orientation`
#      * Coluna "Data" exibindo o campo `checkInDate` formatado
#      * Status com chips coloridos
#      * Nome do colaborador
#
# 4. Melhorias de UX:
#    - Chips coloridos para indicadores
#    - Cards para métricas importantes
#    - Destaque visual para tarefas pendentes do fim do mês
#    - Interface hierárquica e organizada
#
# 5. Dependências:
#    - Material-UI: Accordion, Grid, Card, Chip, Table, etc.
#    - Ícones: ExpandMore, UnfoldMore, UnfoldLess, etc.
#    - React hooks: useState, useEffect, useMemo
#
# 6. Notas de Implementação:
#    - A página mantém a mesma estrutura de dados do Dashboard
#    - Não foram feitas alterações no backend ou no Dashboard.js
#    - A lógica de desduplicação e processamento foi replicada no frontend
# -----------------------------------------------------------------------------

# Esquema do Banco de Dados: auvo.db
# Este arquivo documenta a estrutura das tabelas e seus relacionamentos.

# ----------------------------------------
# Tabela: customer_groups (Contratos)
# ----------------------------------------
# Armazena os contratos principais.

CREATE TABLE customer_groups (
    id INTEGER PRIMARY KEY,      -- ID único do contrato
    description TEXT             -- Nome/descrição do contrato (ex: STS36693/22 SETOR 01)
);

# ----------------------------------------
# Tabela: customers (Escolas/Clientes)
# ----------------------------------------
# Armazena os clientes (escolas), que são associados a um ou mais contratos.

CREATE TABLE customers (
    id INTEGER PRIMARY KEY,                  -- ID único do cliente/escola
    description TEXT,                        -- Nome da escola
    groupsId TEXT,                           -- JSON string com IDs de 'customer_groups' (ex: "[156750]")
    managersId TEXT,                         -- JSON string com IDs de 'users' (colaboradores responsáveis)
    externalId TEXT,
    cpfCnpj TEXT,
    phoneNumber TEXT,
    email TEXT,
    manager TEXT,
    managerJobPosition TEXT,
    note TEXT,
    address TEXT,
    latitude REAL,
    longitude REAL,
    maximumVisitTime INTEGER,
    unitMaximumTime INTEGER,
    managerTeamsId TEXT,
    segmentId INTEGER,
    active INTEGER,
    adressComplement TEXT,
    creationDate TIMESTAMP,
    contacts TEXT,
    dateLastUpdate TIMESTAMP,
    uriAnexos TEXT,
    uriAttachments TEXT
);

# ----------------------------------------
# Tabela: users (Colaboradores)
# ----------------------------------------
# Armazena os usuários/colaboradores.

CREATE TABLE users (
    userId INTEGER PRIMARY KEY,              -- ID único do colaborador
    name TEXT,                               -- Nome do colaborador
    externalId TEXT,
    smartphoneNumber TEXT,
    login TEXT,
    email TEXT,
    culture TEXT,
    jobPosition TEXT,
    employeeNotification TEXT
);

# ----------------------------------------
# Tabela: equipments (Equipamentos)
# ----------------------------------------
# Armazena os equipamentos, associados a uma escola.

CREATE TABLE equipments (
    id INTEGER PRIMARY KEY,                  -- ID único do equipamento
    name TEXT,                               -- Nome do equipamento
    associated_customer_id INTEGER,          -- Chave estrangeira para 'customers.id'
    tipo TEXT,
    setor_id INTEGER,
    ativo INTEGER,
    identificador TEXT
);

# ----------------------------------------
# Tabela: task_types (Tipos de Tarefa)
# ----------------------------------------
# Define os diferentes tipos de tarefas que podem ser executadas.

CREATE TABLE task_types (
    id INTEGER PRIMARY KEY,                  -- ID único do tipo de tarefa
    description TEXT,                        -- Nome/descrição do tipo de tarefa
    creatorId INTEGER,
    creationDate TIMESTAMP,
    standardTime TEXT,
    toleranceTime TEXT,
    standardQuestionnaireId INTEGER,
    active INTEGER,
    sendSatisfactionSurvey INTEGER,
    requirements TEXT,
    dateLastUpdate TEXT,
    externalId TEXT,
    color TEXT,
    standartQuestionnaireId INTEGER,
    standartTime TEXT
);

# ----------------------------------------
# Tabela: tasks (Tarefas)
# ----------------------------------------
# Armazena as tarefas a serem executadas, ligando colaboradores, escolas e equipamentos.

CREATE TABLE tasks (
    id INTEGER PRIMARY KEY,
    app_id INTEGER,
    app_key TEXT,
    status TEXT,
    date_start TIMESTAMP,
    date_end TIMESTAMP,
    task_type_id INTEGER,
    task_type_description TEXT,
    customer_id INTEGER,
    customer_name TEXT,
    customer_group_id INTEGER,
    customer_group_name TEXT,
    user_id INTEGER,
    user_name TEXT,
    user_email TEXT,
    form_id INTEGER,
    form_name TEXT,
    form_answers TEXT, -- Armazenado como JSON string
    date_last_update TIMESTAMP,
    externalId TEXT,
    idUserFrom INTEGER,                      -- Usuário que criou
    idUserTo INTEGER,                        -- Usuário responsável (quem executa)
    userToName TEXT,                         -- Nome do responsável
    userFromName TEXT,                       -- Nome de quem criou
    customerId INTEGER,                      -- Escola
    customerExternalId TEXT,
    customerDescription TEXT,
    taskType INTEGER,                        -- Tipo (ID)
    taskTypeDescription TEXT,                -- Tipo (nome)
    creationDate TIMESTAMP,                  -- Data de criação
    taskDate TIMESTAMP,                      -- Data planejada
    latitude REAL,
    longitude REAL,
    address TEXT,
    orientation TEXT,
    priority INTEGER,
    deliveredOnSmarthPhone INTEGER,          -- Booleano
    deliveredDate TIMESTAMP,
    finished INTEGER,                        -- Booleano: tarefa finalizada
    report TEXT,
    visualized INTEGER,                      -- Booleano
    visualizedDate TIMESTAMP,
    checkIn INTEGER,                         -- Booleano: houve check-in
    checkInDate TIMESTAMP,
    checkOut INTEGER,                        -- Booleano: houve check-out
    checkOutDate TIMESTAMP,
    checkinType INTEGER,
    equipmentsId TEXT,                       -- Equipamentos (JSON)
    keyWords TEXT,                           -- Palavras-chave (JSON)
    keyWordsDescriptions TEXT,               -- Palavras-chave descrições (JSON)
    inputedKm REAL,
    adoptedKm REAL,
    attachments TEXT,                        -- Anexos (JSON)
    questionnaires TEXT,                     -- Questionários (JSON)
    signatureUrl TEXT,                       -- URL da assinatura (imagem)
    checkInDistance REAL,
    checkOutDistance REAL,
    sendSatisfactionSurvey INTEGER,          -- Booleano
    survey TEXT,
    taskUrl TEXT,                            -- Link da tarefa
    pendency TEXT,
    dateLastUpdate TIMESTAMP,
    ticketId INTEGER,
    ticketTitle TEXT,
    signatureName TEXT,                      -- Nome de quem assinou
    signatureDocument TEXT,                  -- Documento de quem assinou
    expense TEXT,
    duration TEXT,
    durationDecimal TEXT,
    displacementStart TEXT,
    products TEXT,                           -- Produtos (JSON)
    services TEXT,                           -- Serviços (JSON)
    additionalCosts TEXT,                    -- Custos adicionais (JSON)
    summary TEXT,                            -- Resumo (JSON)
    estimatedDuration TEXT,
    financialCategory TEXT,
    taskStatus INTEGER,                      -- Status da tarefa
    openedOnLocation INTEGER,
    lastUpdate TEXT,
    is_link_valid INTEGER,
    FOREIGN KEY (idUserFrom) REFERENCES users(userId),
    FOREIGN KEY (idUserTo) REFERENCES users(userId),
    FOREIGN KEY (customerId) REFERENCES customers(id)
);

# ----------------------------------------
# Tabela: billing_rates (Taxas de Faturamento)
# ----------------------------------------
# Armazena os preços (unitário e adicional) para cada tipo de serviço por contrato.

CREATE TABLE billing_rates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    contract_id INTEGER NOT NULL,
    description TEXT NOT NULL,
    unit_price REAL DEFAULT 0,
    additional_price REAL DEFAULT 0,
    UNIQUE(contract_id, description)
);

# ----------------------------------------
# Tabela: billing_adjustments (Ajustes de Faturamento)
# ----------------------------------------
# Armazena outros custos ou ajustes por contrato, como taxas de equipamento.

CREATE TABLE billing_adjustments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    contract_id INTEGER NOT NULL,
    description TEXT NOT NULL,
    value REAL DEFAULT 0,
    UNIQUE(contract_id, description)
);


# Campos relevantes para análise de finalização/assinatura:
# - finished: Flag de finalização (0/1)
# - taskStatus: Status numérico (ex: 5 = Finalizada)
# - checkIn, checkInDate, checkOut, checkOutDate: Flags e datas de check-in/out
# - signatureName: Nome de quem assinou
# - signatureUrl: Imagem da assinatura
# - signatureDocument: Documento do assinante
# - userToName: Nome do responsável pela execução



# ========================================
# Resumo dos Relacionamentos Principais
# ========================================
# 1. Contrato -> Escola: `customer_groups.id` está em `customers.groupsId`.
# 2. Escola -> Colaborador: `users.userId` está em `customers.managersId`.
# 3. Escola -> Equipamento: `customers.id` é `equipments.associated_customer_id`.
# 4. Tarefa -> Escola: `customers.id` é `tasks.customerId`.
# 5. Tarefa -> Colaborador: `users.userId` é `tasks.idUserTo`.
# 6. Tarefa -> Tipo de Tarefa: `task_types.id` é `tasks.taskType`.
# ========================================

# ========================================
# Adendo ao Schema - Detalhes da Tabela 'tasks'
# ========================================
# Coluna `taskUrl`:
#   - Contém o link direto para a página da tarefa na plataforma Auvo.
#
# Coluna `taskStatus`:
#   - Representa o status da tarefa como um valor numérico.
#   - Mapeamento de valores:
#     - 1: Aberta
#     - 2: Em Deslocamento
#     - 3: Check-in
#     - 4: Check-out
#     - 5: Finalizada
#     - 6: Pausada
# ========================================

# ========================================
# Estrutura Final da Resposta da API (JSON)
# ========================================
# Endpoint: /api/dashboard/contrato/{group_id}
#
# Descreve o objeto JSON retornado pelo backend. O frontend (Dashboard.js)
# é construído para consumir dados exatamente neste formato.
#
# {
#   "contract": { ... },       // Objeto com detalhes do contrato selecionado.
#   "indicators": { ... },     // Objeto com os KPIs (indicadores) do painel.
#   "schools": [ ... ],        // Array de objetos, onde cada objeto representa uma escola.
#   "collaborators": [ ... ]   // Array de objetos, onde cada objeto representa um colaborador.
# }
#
# --- Detalhes da Estrutura ---
#
# 1. indicators:
#    - "total_schools": (Integer) Número total de escolas no contrato.
#    - "total_collaborators": (Integer) Número total de colaboradores únicos.
#    - "total_equipments": (Integer) Número total de equipamentos.
#    - "total_tasks": (Integer) Número total de tarefas.
#    - "completion_rate": (Float) Percentual de tarefas concluídas.
#    - "task_type_kpis": [
#        { "id": (Integer), "description": (String), "count": (Integer) }
#      ]
#
# 2. schools:
#    - Array de objetos, cada um com a seguinte estrutura:
#    {
#      "school_info": { ... }, // Objeto com todos os campos da tabela 'customers'.
#      "equipments": [         // Array de equipamentos da escola.
#        {
#          "id": (Integer),
#          "name": (String),
#          "identificador": (String),
#          "categoryName": (String) // Derivado do campo 'tipo'.
#        }
#      ],
#      "tasks": [              // Array de tarefas associadas à escola.
#        {
#          "taskID": (Integer),
#          "taskTypeDescription": (String), // Descrição do tipo de tarefa.
#          "taskStatus": (Integer),         // Código numérico do status.
#          "date": (String: ISO Date),      // Data da tarefa.
#          "taskUrl": (String)              // Link direto para a tarefa.
#        }
#      ],
#      "metrics": {              // Objeto com métricas de desempenho da escola.
#        "ativos": (Integer),      // Total de equipamentos ativos na escola.
#        "realizadas": (Integer),  // Total de equipamentos únicos com tarefas finalizadas.
#        "percentual": (Float)     // Percentual de conclusão (realizadas / ativos).
#      }
#    }
#
# 3. collaborators:
#    - Array de objetos, cada um com a seguinte estrutura:
#    {
#      "userId": (Integer),
#      "name": (String),
#      "tasks": [ ... ] // Array de tarefas atribuídas a este colaborador.
#    }
#

# ========================================
# Histórico de Modificações
# ========================================
#
# ---
# Data: 10/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Criação do Painel Administrativo de Faturamento.
#
# 1. Backend (api_backend.py):
#    - Adicionadas novas tabelas ao banco de dados: `billing_rates` e `billing_adjustments` para armazenar configurações de faturamento sem alterar o schema existente.
#    - Criados novos endpoints:
#      - `/api/billing/rates/{contract_id}` (GET): Para buscar as taxas de um contrato.
#      - `/api/billing/rates` (POST): Para salvar as taxas de um contrato.
#      - `/api/billing/task-types` (GET): Para buscar os tipos de tarefa faturáveis, filtrados por uma lista de IDs pré-definida.
#
# 2. Frontend (BillingAdmin.js & Sidebar.js):
#    - Adicionado um novo item de menu "Admin Faturamento" na barra lateral.
#    - Criada a nova página `BillingAdmin.js` para permitir a gestão das taxas de faturamento.
#    - A página busca dinamicamente os contratos e os tipos de tarefa faturáveis da API.
#    - Implementado um filtro que exibe apenas os serviços relevantes para o contrato selecionado, com base na nomenclatura.
#    - Permite a edição e salvamento dos preços unitários e adicionais para cada serviço.
#
# ---
# Data: 10/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Criação da Página de Visão Consolidada e Tabela de Equipamentos.
#
# 1. Frontend (ConsolidatedView.js & EquipmentTable.js):
#    - Criada uma nova página, `ConsolidatedView.js`, para fornecer uma visão geral do status dos contratos.
#    - Desenvolvido um novo componente, `EquipmentTable.js`, que é o principal elemento da nova página.
#    - A `EquipmentTable` busca os dados de todos os contratos via endpoint da API e os processa para exibir métricas detalhadas.
#    - As métricas incluem:
#      - Quantidade prevista vs. realizada para manutenções preventivas (mensal e semestral).
#      - Percentual de conclusão.
#      - Contagem de manutenções corretivas.
#      - Estimativas de dias de trabalho restantes para concluir as tarefas pendentes.
#    - O componente agrupa os dados por contrato/setor e apresenta uma tabela clara para cada um, facilitando a análise de desempenho.
#
# 2. Backend (api_backend.py):
#    - O endpoint que serve os dados para esta visão foi ajustado para garantir que todos os contratos ativos sejam retornados com os campos necessários para os cálculos no frontend.
#
# ---

# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Implementação de Métricas de Desempenho por Escola.
#
# 1. Backend (api_backend.py):
#    - A função `_get_dashboard_by_contract_data` foi atualizada para calcular novas métricas para cada escola.
#    - Um novo campo "metrics" foi adicionado à resposta da API para cada escola, contendo:
#      - "ativos": Contagem total de equipamentos associados à escola.
#      - "realizadas": Contagem de equipamentos *únicos* que aparecem em questionários de tarefas com status "Finalizada" (código 5).
#      - "percentual": Cálculo de (realizadas / ativos) * 100.
#
# 2. Frontend (Dashboard.js):
#    - A visualização das escolas foi reestruturada para um formato de tabela/acordeão.
#    - A linha principal de cada escola agora exibe as novas métricas (Ativos, Realizadas, Percentual), permitindo uma visão rápida do desempenho.
#    - A funcionalidade de expandir a linha para ver detalhes de equipamentos e tarefas foi mantida.
#
# 3. Estrutura da API (JSON):
#    - O objeto de cada escola no array "schools" foi atualizado para incluir o objeto "metrics", conforme detalhado na seção "Estrutura Final da Resposta da API (JSON)".

# ---
# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Implementação de Filtragem e Ordenação Dinâmica no Frontend.
#
# 1. Frontend (Dashboard.js):
#    - Adicionada lógica para filtrar escolas com base no "Tipo de Tarefa" selecionado.
#    - Ao aplicar um filtro, as métricas de "Realizadas" e "% Realizadas" são recalculadas dinamicamente no frontend para refletir apenas as tarefas do tipo selecionado.
#    - A lista de escolas é reordenada para exibir primeiro as com menor percentual de conclusão, destacando as que precisam de mais atenção.
#    - Apenas escolas que possuem tarefas do tipo selecionado são exibidas.

# ---
# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Filtragem de Equipamentos Ativos no Backend.
#
# 1. Backend (api_backend.py):
#    - A consulta SQL que busca os equipamentos foi modificada para incluir a condição `AND ativo = 1`.
#    - Isso garante que apenas equipamentos marcados como ativos no banco de dados sejam retornados pela API e considerados nos cálculos de métricas.

# ---
# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Lógica de Inclusão de Colaboradores no Painel.
#
# 1. Backend (api_backend.py):
#    - A função `_get_dashboard_by_contract_data` foi alterada para corrigir uma falha que impedia a exibição de colaboradores que não eram gerentes de escolas.
#    - Anteriormente, apenas usuários listados no campo `managersId` das escolas eram buscados.
#    - A nova lógica primeiro busca todas as tarefas associadas às escolas do contrato e, a partir delas, extrai os IDs de todos os usuários (`idUserTo`).
#    - Esses IDs são combinados com os IDs dos gerentes para formar uma lista completa de colaboradores, garantindo que qualquer usuário com uma tarefa atribuída no contrato seja exibido no painel, como no caso do usuário Gabriel (ID 187117).

# ---
# Data: 30/06/2025
# Responsável: Cascade
# ---
#
# Modificação: Refinamentos e Correções no Frontend (Dashboard.js).
#
# 1. Correção de Erro de Referência:
#    - Corrigido um `ReferenceError` que ocorria durante a computação de `processedData` devido a uma variável `indicators` indefinida.
#
# 2. Lógica de Filtro de Tarefas:
#    - Ajustada a lógica de filtro para que, ao selecionar "Todos os Tipos", todas as tarefas sejam exibidas corretamente.
#
# 3. Visualização de Percentual:
#    - Adicionada codificação por cores (vermelho, laranja, amarelo, verde) ao fundo do percentual de conclusão para melhor visualização do status.
#
# 4. Validação de Link de Tarefa:
#    - A data da tarefa agora considera `checkInDate` ou `lastUpdate`.
#    - O ícone de link para o relatório da tarefa só é exibido se uma dessas datas for válida, evitando links quebrados.
#
# 5. Filtragem de Equipamentos Ativos:
#    - A lista de equipamentos em cada escola agora exibe apenas os itens com `ativo = 1`.
#    - O título do acordeão foi atualizado para "Equipamentos Ativos" e a contagem reflete apenas os ativos.
#
# 6. Atualização da Barra de Resumo da Escola:
#    - A barra de resumo de cada escola foi modificada para exibir "Ativos: [N] | Tarefas: [N]", refletindo a contagem de equipamentos ativos e o total de tarefas filtradas.

# ---
# Data: 04/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Dashboard Responsiveness e Melhorias de UI
#
# 1. Remoção de IDs Numéricos dos Nomes das Escolas:
#    - Adicionamos a função `cleanSchoolName` para remover IDs numéricos (ex: `[112846, 112845] - `) do início dos nomes das escolas.
#    - Aplicamos esta função no componente SchoolRow para exibir nomes de escolas mais limpos e amigáveis.
#
# 2. Melhorias de Responsividade:
#    - Cabeçalho do Dashboard:
#      * Reorganizamos o seletor de contrato e os campos de data para ficarem lado a lado em telas maiores.
#      * Implementamos layout flexível que se adapta a diferentes tamanhos de tela.
#    - SchoolRow:
#      * Melhoramos o layout do AccordionSummary para adaptar a direção flex e espaçamento baseado no tamanho da tela.
#      * Centralizamos elementos de texto em telas pequenas e alinhamos à esquerda em telas maiores.
#      * Adicionamos truncamento de texto com tooltips para evitar quebras de layout.
#
# 3. Tabelas de Equipamentos e Tarefas:
#    - Equipamentos:
#      * Envolvemos as tabelas em containers com largura máxima controlada e overflow para evitar quebras de layout.
#      * Adicionamos truncamento e tooltips para colunas de nome e identificador.
#      * Melhoramos o toggle para mostrar apenas equipamentos ativos.
#    - Tarefas:
#      * Implementamos ordenação de tarefas por data (mais recente primeiro).
#      * Adicionamos truncamento, tooltips e larguras responsivas para colunas.
#      * Garantimos que links de tarefas abram em novas abas.
#
# 4. Comportamento dos Acordeões:
#    - Removemos a expansão automática dos acordeões de Equipamentos e Tarefas.
#    - Alinhamos os títulos dos acordeões à esquerda para melhor organização visual.
#
# 5. Importações e Dependências:
#    - Adicionamos importações faltantes como `FormControlLabel` e `Switch` do Material-UI.
#    - Mantivemos consistência no uso de componentes MUI para estilo e layout.
#
# 6. Correções de Bugs:
#    - Corrigimos erros de referência a componentes não definidos.
#    - Garantimos que todos os componentes tenham as propriedades necessárias.

# ---
# Data: 04/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Correção da Lógica de Progresso por Escola
#
# 1. Filtro de Tipos de Tarefas Válidas para Progresso (Frontend – Dashboard.js):
#    - Criada a constante `ALLOWED_PROGRESS_TASKS` contendo as descrições (case-insensitive):
#      * "Preventiva Mensal"
#      * "Mensal"
#      * "Semestral"
#      * "Preventiva Semestral"
#    - A função `getSchoolPercentual` agora:
#      * Filtra tarefas pelo intervalo de datas selecionado E pela existência de link válido.
#      * Mantém somente as tarefas cujo `orientation` contenha algum desses termos.
#      * Calcula `finished` considerando status 5 ou 6.
#      * Utiliza `progressTasks.length` como denominador, garantindo porcentagem correta.
#
# 2. Atualização do Componente `SchoolRow`:
#    - A cor de fundo e o valor exibido do percentual passam `dateRange.start` / `dateRange.end` para `getSchoolPercentual`, assegurando coerência com o filtro de datas.
#
# 3. Efeito Prático:
#    - A barra de progresso apresenta agora a porcentagem correta, baseada unicamente nas tarefas mensais/semestrais relevantes.
#    - As cores (verde, amarelo, laranja, vermelho) refletem com precisão o status de conclusão após o novo cálculo.
#
# 4. Possíveis Pontos de Falha Futuros:
#    - Se novos tipos de tarefas precisarem contar para o progresso, basta adicionar a descrição na lista `ALLOWED_PROGRESS_TASKS`.
#    - Caso a API altere a nomenclatura de `orientation`, será necessário ajustar o filtro para manter a compatibilidade.

# ---
# Data: 04/07/2025
# Responsável: Cascade
# ---
#
# Modificação: Inclusão de KPIs Mensal / Semestral / PMOC / Corretiva e Ajustes de Layout
#
# 1. Novos KPIs (Frontend – Dashboard.js):
#    - Criados helpers `computeCustomKpis` e `renderCustomKpiCards`.
#    - Adicionadas métricas:
#        * Preventiva Mensal (% de equipamentos com tarefa Mensal ou Semestral concluída no mês).
#        * Preventiva Semestral (% de equipamentos com tarefa Semestral concluída no mês; denominador = 478/6 ≈ 79).
#        * PMOC (% de equipamentos com PMOC concluída acumulado desde mar/2025).
#        * Corretivas (quantidade de tarefas Corretivas concluídas no mês).
#    - Lógica robusta: identifica tarefas por `taskType` ID OU palavras-chave em `orientation`.
#
# 2. Barra de Progresso Escolar:
#    - `getSchoolPercentual` agora usa IDs + keywords para contar Mensal/Semestral.
#
# 3. Layout de Indicadores:
#    - Removido card "Tarefas Concluídas" para manter 4 cartões na primeira linha.
#    - Ajustado Grid para `md=3`, garantindo alinhamento 4×3 colunas.
#
# 4. Dependências:
#    - Ícones adicionados: `EventRepeatIcon`, `CalendarViewWeekIcon`, `ArticleIcon`, `BuildIcon`.
#
# 5. Possíveis Ajustes Futuros:
#    - Caso o total de equipamentos (478) se altere, atualizar a constante `KPI_TOTAL_EQUIP`.
#    - Para adicionar novos tipos de tarefa, incluir IDs/keywords em `KPI_CATEGORIES`.

# -----------------------------------------------------------------------------
# Data: 04/07/2025
# Responsável: Cascade
# Checkpoint: Dash KPIs – Excedentes e UX
# -----------------------------------------------------------------------------
# 1. Excedentes em KPIs:
#    - `computeCustomKpis` passou a calcular `mensalEx`, `semestralEx`, `pmocEx` (equipamentos além do denominador).
#    - Valor percentual permanece 100 % (cap em 100) e `done` exibido = `total`.
#    - Excedentes mostrados em badge vermelho ao lado do KPI.
#    - Lista detalhada reunida por helper `getExcedentEquipments`; abre em diálogo.
#
# 2. UI/UX:
#    - `KpiCard` recebeu prop `extra` para renderizar badge + ícone.
#    - Ícone com `Tooltip` "Excedentes" (hover) e `Badge` indicando quantidade.
#    - Click no ícone chama `openExDialog`, exibindo `Dialog` com lista de equipamentos excedentes ("Escola – id").
#
# 3. Valores Exibidos:
#    - Formato invertido para `total/realizado` (ex: 478/478), usando `Math.min(done, total)`.
#    - Excedente permanece visível somente via badge.
#
# 4. Helpers Adicionados (Dashboard.js):
#    - `parseEquipIds` – normaliza `equipmentsId` em array.
#    - `getExcedentEquipments` – gera lista filtrando por período/category e recortando itens extras.
#
# 5. Acessibilidade & Layout:
#    - `Tooltip` em todos os ícones de excedente.
#    - Removida duplicidade de cabeçalho; `renderHeader` é chamado apenas uma vez.
#
# 6. Como Reverter / Ajustar:
#    - Para ocultar excedente completamente, remova badge + ícone em `renderCustomKpiCards`.
#    - Para alterar texto do Tooltip, edite string "Excedentes".
#    - Para mudar denominadores (ex: novos equipamentos), altere `KPI_CATEGORIES`.
# -----------------------------------------------------------------------------

# Data: 04/07/2025
# Responsável: Cascade
# Checkpoint: Planner Semestral & Exportação Excel
# -----------------------------------------------------------------------------
# 1. Nova Página `SemestralPlanner` (frontend):
#    - Menu lateral "Semestral" adicionado ao `Sidebar` (ícone CalendarViewWeek).
#    - Rota `/semestral` registrada em `App.js`.
#    - Página lista, por escola, a quantidade de equipamentos ATIVOS sem Preventiva Semestral no período selecionado.
#    - Expansor permite ver lista de equipamentos pendentes por escola.
#    - Filtros: contrato + data início/fim.
#
# 2. Exportação Excel:
#    - Botão "Exportar Excel" gera planilha `pendentes_semestral_<contrato>_<start>_<end>.xlsx`.
#    - Implementado via biblioteca `xlsx` (SheetJS). Dependência instalada com `npm install xlsx`.
#
# 3. Helpers reutilizados/adicionados:
#    - `parseEquipIds`, `matchesCategory`, `isInPeriod` replicados para página.
#    - Equipamento exibido pelo campo `name` (fallback `description`).
#
# 4. Correções:
#    - Importado `IconButton`, `Button` e ícones de seta (up/down) para evitar erros de runtime.
#    - Corrigido aninhamento de Grid/Paper no JSX.
#
# 5. Observações de Segurança:
#    - Dependência `xlsx` adicionada; `npm audit` indica 10 vulnerabilidades (3 mod/7 high). Avaliar.
# -----------------------------------------------------------------------------

# =============================================================================
# SEPARAÇÃO DE USUÁRIOS DO PAINEL E USUÁRIOS DA AUVO
# =============================================================================
# A partir de julho/2025, o painel administrativo utiliza uma tabela exclusiva
# para autenticação e controle de acesso dos usuários do painel:
#
#   CREATE TABLE IF NOT EXISTS usuarios_painel (
#       id INTEGER PRIMARY KEY AUTOINCREMENT,
#       nome_completo TEXT NOT NULL,
#       cpf TEXT NOT NULL UNIQUE,
#       data_nascimento TEXT,
#       foto TEXT,
#       username TEXT NOT NULL UNIQUE,
#       senha_hash TEXT NOT NULL,
#       permissoes TEXT NOT NULL -- JSON de abas permitidas
#   );
#
# - Esta tabela é gerenciada apenas pelo backend FastAPI do painel.
# - Não interfere e não é sobrescrita pelo processo de sincronização da Auvo.
# - Os endpoints de CRUD de usuários do painel usam exclusivamente esta tabela.
#
# A tabela 'users' permanece dedicada aos usuários sincronizados da Auvo,
# e nunca deve ser alterada pelo painel administrativo.
# =============================================================================

# =============================================================================
# ATUALIZAÇÃO DA PÁGINA DE RELATÓRIO DE FATURAMENTO (11/07/2025)
# =============================================================================
# A página FaturamentoReport.js foi atualizada para replicar a funcionalidade do
# Dashboard.js, com melhorias na interface e organização dos dados:
#
# 1. Integração com API:
#    - Utiliza o endpoint `/dashboard/{contractId}` com parâmetros de data
#    - Replica a lógica de desduplicação, agrupamento e cálculo de KPIs do Dashboard
#
# 2. Estrutura de Dados:
#    - Processa tarefas para mostrar apenas as do mês atual
#    - Identifica tarefas pendentes para o fim do mês (7 últimos dias)
#    - Calcula indicadores globais: total de escolas, tarefas, concluídas, abertas
#    - Extrai lista completa de colaboradores com suas estatísticas
#
# 3. Interface do Usuário:
#    - Todas as seções principais são expansíveis (Accordion):
#      * Resumo do Mês Atual (expandido por padrão)
#      * Colaboradores (expandido por padrão)
#      * Tarefas pendentes para o fim do mês (expandido por padrão)
#      * Escolas (recolhido por padrão)
#    - Seção de escolas com:
#      * Botões para expandir/recolher todas as escolas
#      * Cada escola expansível individualmente
#      * Detalhes por escola: métricas, colaboradores e tarefas
#    - Tabelas de tarefas mostram:
#      * Coluna "Tarefa" exibindo o campo `orientation`
#      * Coluna "Data" exibindo o campo `checkInDate` formatado
#      * Status com chips coloridos
#      * Nome do colaborador
#
# 4. Melhorias de UX:
#    - Chips coloridos para indicadores
#    - Cards para métricas importantes
#    - Destaque visual para tarefas pendentes do fim do mês
#    - Interface hierárquica e organizada
#
# 5. Dependências:
#    - Material-UI: Accordion, Grid, Card, Chip, Table, etc.
#    - Ícones: ExpandMore, UnfoldMore, UnfoldLess, etc.
#    - React hooks: useState, useEffect, useMemo
#
# 6. Notas de Implementação:
#    - A página mantém a mesma estrutura de dados do Dashboard
#    - Não foram feitas alterações no backend ou no Dashboard.js
#    - A lógica de desduplicação e processamento foi replicada no frontend
# -----------------------------------------------------------------------------

# Estrutura do Banco de Dados - Projeto Auvo

## Tabela: customers (escolas)
- id (PK)
- externalId
- description (nome da escola)
- cpfCnpj
- phoneNumber (JSON string)
- email (JSON string)
- manager
- managerJobPosition
- note
- address
- latitude
- longitude
- maximumVisitTime
- unitMaximumTime
- groupsId (JSON string)
- managerTeamsId (JSON string)
- managersId (JSON string)
- segmentId
- active (0/1)
- adressComplement
- creationDate
- contacts (JSON string)
- dateLastUpdate
- uriAnexos (JSON string)
- uriAttachments

**Relacionamentos:**
- Cada equipamento pode ter um campo `associated_customer_id` ligando ao `id` de customers.
- Cada tarefa pode ter um campo `customerId` ligando ao `id` de customers.

---

## Tabela: equipments
- id (PK)
- name
- tipo
- setor_id
- associated_customer_id (chave estrangeira para customers.id)
- ativo
- identificador

**Relacionamentos:**
- Equipamento pertence a uma escola (`associated_customer_id`).

---

## Tabela: tasks
- taskID (PK)
- externalId
- idUserFrom (quem criou)
- idUserTo (quem executa)
- userToName
- userFromName
- customerId (escola)
- customerExternalId
- customerDescription
- taskType
- taskTypeDescription
- creationDate
- taskDate
- latitude
- longitude
- address
- orientation
- priority
- deliveredOnSmarthPhone (0/1)
- dateLastUpdate

**Relacionamentos:**
- Tarefa pertence a uma escola (`customerId`).
- Tarefa atribuída a um usuário (`idUserTo`), criada por outro (`idUserFrom`).
- Tarefa tem tipo e status.

---

## Tabela: users
- userId (PK)
- externalId
- name
- smartphoneNumber
- login
- email
- culture
- jobPosition
- userTypeId
- userTypeDescription
- workDaysOfWeek (JSON string)
- startWorkHour
- endWorkHour
- startLunchHour
- endLunchHour
- hourValue
- pictureUrl
- basePointAddress
- basePointLatitude
- basePointLongitude
- openTaskInPlace (0/1)
- grabGalleryPhotos (0/1)
- gpsFrequency
- checkInManual (0/1)
- unavailableForTasks (0/1)
- editTaskAfterCheckout (0/1)
- informStartTravel (0/1)
- changeBasePoint (0/1)
- associated_customer_id
- ativo
- identificador

---

## Tabela: customer_groups
- id (PK)
- description

---

## Outras tabelas relevantes
- product_categories, products, equipment_categories, questionnaires, teams, quotations, tickets, expense_types, satisfaction_surveys, expenses, segments, webhooks, gps, service_orders, keywords, services, task_types

---

## Relações principais para o Dashboard
- Cliente (escola) → Equipamentos: via `equipments.associated_customer_id = customers.id`
- Cliente (escola) → Tarefas: via `tasks.customerId = customers.id`
- Tarefa → Usuário: via `tasks.idUserTo = users.userId`
- Tarefa → Tipo/Status: via `tasks.taskTypeDescription` e campos de data/status

---

## Exemplos de perguntas para o dashboard
- Quantas escolas foram atendidas no período X?
- Quais tarefas foram concluídas, pendentes, canceladas, por escola?
- Quem executou cada tarefa?
- Quais equipamentos estão em cada escola?
- Quais tipos de tarefa foram realizados em cada escola?

---

**Este documento serve como referência para o mapeamento e entendimento das relações do banco de dados do projeto Auvo.**



